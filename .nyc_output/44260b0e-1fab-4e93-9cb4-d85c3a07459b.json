{"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/utils/mongo-connect.ts":{"path":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/utils/mongo-connect.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":19},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":21}},"3":{"start":{"line":5,"column":0},"end":{"line":22,"column":2}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":69}},"5":{"start":{"line":7,"column":4},"end":{"line":21,"column":5}},"6":{"start":{"line":8,"column":8},"end":{"line":8,"column":46}},"7":{"start":{"line":9,"column":20},"end":{"line":9,"column":53}},"8":{"start":{"line":10,"column":8},"end":{"line":20,"column":11}},"9":{"start":{"line":11,"column":12},"end":{"line":19,"column":13}},"10":{"start":{"line":12,"column":16},"end":{"line":12,"column":41}},"11":{"start":{"line":13,"column":16},"end":{"line":13,"column":27}},"12":{"start":{"line":16,"column":16},"end":{"line":16,"column":55}},"13":{"start":{"line":17,"column":16},"end":{"line":17,"column":33}},"14":{"start":{"line":18,"column":16},"end":{"line":18,"column":27}},"15":{"start":{"line":23,"column":0},"end":{"line":26,"column":3}},"16":{"start":{"line":27,"column":13},"end":{"line":27,"column":57}},"17":{"start":{"line":28,"column":0},"end":{"line":28,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":25},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":37},"end":{"line":22,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":45},"end":{"line":10,"column":46}},"loc":{"start":{"line":10,"column":54},"end":{"line":20,"column":9}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":21,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":21,"column":5}},{"start":{"line":7,"column":4},"end":{"line":21,"column":5}}],"line":7},"1":{"loc":{"start":{"line":11,"column":12},"end":{"line":19,"column":13}},"type":"if","locations":[{"start":{"line":11,"column":12},"end":{"line":19,"column":13}},{"start":{"line":11,"column":12},"end":{"line":19,"column":13}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/utils/mongo-connect.ts","sources":["/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/utils/mongo-connect.ts"],"names":[],"mappings":";;AAAA,uCAA4D;AAE5D,IAAI,SAAS,GAAG,KAAK,CAAA;AAER,QAAA,cAAc,GAAG,KAAK,IAAG,EAAE;IAEpC,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,SAAS,CAAC,CAAA;IAEhE,IAAI,CAAC,SAAS,EAAE;QAEZ,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAA;QACrC,MAAM,GAAG,GAAW,iCAAiC,CAAC;QAEtD,OAAO,MAAM,kBAAO,CAAC,GAAG,EAAE,CAAC,GAAQ,EAAE,EAAE;YACnC,IAAI,GAAG,EAAE;gBACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACzB,OAAO,GAAG,CAAC;aACd;iBAAM;gBACH,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;gBACvC,SAAS,GAAG,IAAI,CAAA;gBAChB,OAAO,GAAG,CAAC;aACd;QACL,CAAC,CAAC,CAAC;KAEN;AACL,CAAC,CAAA;AAOY,QAAA,UAAU,GAAG,IAAI,iBAAM,CAAC;IACjC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;CAC3C,CAAC,CAAC;AAEH,MAAM,IAAI,GAAG,gBAAK,CAAQ,MAAM,EAAE,kBAAU,CAAC,CAAC;AAC9C,kBAAe,IAAI,CAAC","sourcesContent":["import { connect, Document, Schema, model } from \"mongoose\";\n\nlet connected = false\n\nexport const connectToMongo = async() => {\n\n    console.log('Really connecting to mongo (no mocks)!', connected)\n    \n    if (!connected) {\n\n        console.log('Connecting to mongo...')\n        const uri: string = \"mongodb://127.0.0.1:27017/local\";\n        \n        return await connect(uri, (err: any) => {\n            if (err) {\n                console.log(err.message);\n                return err;\n            } else {\n                console.log(\"Successfully Connected!\");\n                connected = true\n                return uri;\n            }\n        });\n        \n    }\n}\n\nexport interface IBook extends Document {\n    title: string;\n    author: string;\n}\n\nexport const BookSchema = new Schema({\n    title: { type: String, required: true },\n    author: { type: String, required: true }\n});\n\nconst Book = model<IBook>(\"Book\", BookSchema);\nexport default Book;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"df2010334fa14cee33cdfcc38089907b3b296628","contentHash":"d3139e853a7825b9a4603e3846ab4dc1fc73a9ad0c091011697d92bd4408b1da"},"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/create.ts":{"path":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/create.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":24},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":29,"column":2}},"3":{"start":{"line":5,"column":4},"end":{"line":5,"column":43}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":66}},"5":{"start":{"line":7,"column":4},"end":{"line":28,"column":7}},"6":{"start":{"line":8,"column":8},"end":{"line":27,"column":11}},"7":{"start":{"line":9,"column":12},"end":{"line":26,"column":13}},"8":{"start":{"line":10,"column":16},"end":{"line":10,"column":43}},"9":{"start":{"line":11,"column":16},"end":{"line":16,"column":19}},"10":{"start":{"line":19,"column":16},"end":{"line":19,"column":52}},"11":{"start":{"line":20,"column":16},"end":{"line":25,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":21},"end":{"line":4,"column":22}},"loc":{"start":{"line":4,"column":48},"end":{"line":29,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":23},"end":{"line":7,"column":24}},"loc":{"start":{"line":7,"column":44},"end":{"line":28,"column":5}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":18},"end":{"line":8,"column":19}},"loc":{"start":{"line":8,"column":33},"end":{"line":27,"column":9}},"line":8}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":12},"end":{"line":26,"column":13}},"type":"if","locations":[{"start":{"line":9,"column":12},"end":{"line":26,"column":13}},{"start":{"line":9,"column":12},"end":{"line":26,"column":13}}],"line":9}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/create.ts","sources":["/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/create.ts"],"names":[],"mappings":";;AAAA,yDAA6D;AAEhD,QAAA,UAAU,GAAG,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;IAEhD,MAAM,8BAAc,EAAE,CAAA;IAEtB,IAAI,IAAI,GAAG,IAAI,uBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAE5C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAEnC,IAAI,CAAC,IAAI,CACL,CAAC,GAAQ,EAAE,IAAI,EAAE,EAAE;YACnB,IAAI,GAAG,EAAE;gBAEL,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;gBAC1B,MAAM,CAAC;oBACH,UAAU,EAAE,GAAG;oBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACjB,KAAK,EAAE,GAAG;qBACb,EAAE,IAAI,EAAE,CAAC,CAAC;iBACd,CAAC,CAAA;aACL;iBACI;gBACD,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAA;gBACnC,OAAO,CAAC;oBACJ,UAAU,EAAE,GAAG;oBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACjB,IAAI,EAAE,IAAI;qBACb,EAAE,IAAI,EAAE,CAAC,CAAC;iBACd,CAAC,CAAA;aACL;QACL,CAAC,CAEA,CAAA;IAEL,CAAC,CAAC,CAAC;AAEP,CAAC,CAAA","sourcesContent":["import Book, { connectToMongo } from './utils/mongo-connect';\n\nexport const insertBook = async (event, _context) => {\n\n    await connectToMongo()\n       \n    var book = new Book(JSON.parse(event.body));\n\n    return new Promise((resolve, reject) => {\n\n        book.save(\n            (err: any, book) => {\n            if (err) {\n\n                console.log('error ', err)\n                reject({\n                    statusCode: 400,\n                    body: JSON.stringify({\n                        error: err,\n                    }, null, 2),\n                })\n            }\n            else {\n                console.log('Book has been saved!')\n                resolve({\n                    statusCode: 200,\n                    body: JSON.stringify({\n                        data: book,\n                    }, null, 2)\n                })\n            }\n        }\n        \n        )\n    \n    });\n\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9c3e8cff8ad81adf5499ce61a2508d50d958ebcb","contentHash":"08adeb25bf23c1b4a25b13f442d193175c26195470d0c57a4eea207b8772b9e6"},"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/delete.ts":{"path":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/delete.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":24},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":25,"column":2}},"3":{"start":{"line":5,"column":4},"end":{"line":5,"column":51}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":43}},"5":{"start":{"line":7,"column":4},"end":{"line":24,"column":5}},"6":{"start":{"line":8,"column":23},"end":{"line":8,"column":96}},"7":{"start":{"line":9,"column":8},"end":{"line":14,"column":10}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":48}},"9":{"start":{"line":18,"column":8},"end":{"line":23,"column":10}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":21},"end":{"line":4,"column":22}},"loc":{"start":{"line":4,"column":47},"end":{"line":25,"column":1}},"line":4}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":2,"6":2,"7":1,"8":1,"9":1},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"file":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/delete.ts","sources":["/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/delete.ts"],"names":[],"mappings":";;AAAA,yDAA6D;AAEhD,QAAA,UAAU,GAAG,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;IAC/C,OAAO,CAAC,8BAA8B,GAAG,KAAK,CAAA;IAE9C,MAAM,8BAAc,EAAE,CAAA;IAEtB,IAAI;QACA,MAAM,MAAM,GAAG,MAAM,uBAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAA;QACrE,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,IAAI,EAAE,MAAM;aACf,EAAE,IAAI,EAAE,CAAC,CAAC;SACd,CAAA;KAEJ;IAAC,OAAO,GAAG,EAAE;QAEV,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;QACvC,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;aAC3B,EAAE,IAAI,EAAE,CAAC,CAAC;SACd,CAAA;KACJ;AAEL,CAAC,CAAA","sourcesContent":["import Book, { connectToMongo } from \"./utils/mongo-connect\";\n\nexport const deleteBook = async (event, context) => {\n    context.callbackWaitsForEmptyEventLoop = false\n\n    await connectToMongo()\n\n    try {\n        const result = await Book.deleteOne({ _id: event.pathParameters.id })\n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                data: result,\n            }, null, 2)\n        }\n\n    } catch (err) {\n\n        console.log(\"err is \" + err.toString())\n        return {\n            statusCode: 400,\n            body: JSON.stringify({\n                errors: [err.toString()],\n            }, null, 2)\n        }\n    }\n\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"91431d0045ecc4af7ab522119c13a176b2d51802","contentHash":"d1a3d1a27c1c01f84a0a765abc54f30363243e874496529687b1f4bc0049eed2"},"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/read.ts":{"path":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/read.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":24},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":24,"column":2}},"3":{"start":{"line":5,"column":4},"end":{"line":5,"column":51}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":43}},"5":{"start":{"line":7,"column":4},"end":{"line":23,"column":5}},"6":{"start":{"line":8,"column":22},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":8},"end":{"line":14,"column":10}},"8":{"start":{"line":17,"column":8},"end":{"line":22,"column":10}},"9":{"start":{"line":25,"column":0},"end":{"line":45,"column":2}},"10":{"start":{"line":26,"column":4},"end":{"line":26,"column":51}},"11":{"start":{"line":27,"column":4},"end":{"line":27,"column":43}},"12":{"start":{"line":28,"column":4},"end":{"line":44,"column":5}},"13":{"start":{"line":29,"column":20},"end":{"line":29,"column":83}},"14":{"start":{"line":30,"column":8},"end":{"line":35,"column":10}},"15":{"start":{"line":38,"column":8},"end":{"line":43,"column":10}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":22},"end":{"line":4,"column":23}},"loc":{"start":{"line":4,"column":49},"end":{"line":24,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":24},"end":{"line":25,"column":25}},"loc":{"start":{"line":25,"column":50},"end":{"line":45,"column":1}},"line":25}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":2,"6":2,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"f":{"0":2,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/read.ts","sources":["/Users/jim/Git-Projects/CRUD-Lambda-TypeScript-Mongo/src/read.ts"],"names":[],"mappings":";;AAAA,yDAA6D;AAEhD,QAAA,WAAW,GAAG,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;IACjD,OAAO,CAAC,8BAA8B,GAAG,KAAK,CAAC;IAE/C,MAAM,8BAAc,EAAE,CAAA;IAEtB,IAAI;QAEA,MAAM,KAAK,GAAG,MAAM,uBAAI,CAAC,IAAI,EAAE,CAAA;QAE/B,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,IAAI,EAAE,KAAK;aACd,EAAE,IAAI,EAAE,CAAC,CAAC;SACd,CAAC;KACL;IACD,OAAO,GAAG,EAAE;QACR,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,MAAM,EAAE,CAAC,EAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC,CAAC;aAC7C,EAAE,IAAI,EAAE,CAAC,CAAC;SACd,CAAA;KACJ;AAEL,CAAC,CAAA;AAEY,QAAA,aAAa,GAAG,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;IAClD,OAAO,CAAC,8BAA8B,GAAG,KAAK,CAAC;IAE/C,MAAM,8BAAc,EAAE,CAAA;IAEtB,IAAI;QACA,MAAM,GAAG,GAAG,MAAM,uBAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACzD,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,IAAI,EAAE,GAAG;aACZ,EAAE,IAAI,EAAE,CAAC,CAAC;SACd,CAAC;KACL;IAAC,OAAO,GAAG,EAAE;QACV,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,IAAI,EAAE,GAAG;aACZ,EAAE,IAAI,EAAE,CAAC,CAAC;SACd,CAAC;KACL;AAEL,CAAC,CAAA","sourcesContent":["import Book, { connectToMongo } from './utils/mongo-connect';\n\nexport const getAllBooks = async (_event, context) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n\n    await connectToMongo()\n\n    try {\n\n        const books = await Book.find()\n        \n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                data: books,\n            }, null, 2)\n        };\n    }\n    catch (err) {\n        return {\n            statusCode: 400,\n            body: JSON.stringify({\n                errors: [{\"message\": err.name.toString()}],\n            }, null, 2),\n        }\n    }\n\n}\n\nexport const getSingleBook = async (event, context) => {\n    context.callbackWaitsForEmptyEventLoop = false;\n\n    await connectToMongo()\n\n    try {\n        const doc = await Book.findById(event.pathParameters.id);\n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                data: doc,\n            }, null, 2)\n        };\n    } catch (err) {\n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                data: err,\n            }, null, 2)\n        };\n    }\n\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"05c6d860b440b00af2016b3cf47aa0ed5893e538","contentHash":"019943d3e692e959333cbdc36599feae444bcf36d50a7772c7ceb95c9208d1c1"}}